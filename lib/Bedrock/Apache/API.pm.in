package Bedrock::Apache::API;

use strict;
use warnings;

use Apache2::Const -compile => qw(
  OK
  FORBIDDEN
  DECLINED
  HTTP_BAD_REQUEST
  HTTP_UNAUTHORIZED
  SERVER_ERROR
  HTTP_INTERNAL_SERVER_ERROR
);

use DBI;
use Data::Dumper;
use English qw(-no_match_vars);
use File::Path qw(make_path);
use JSON;
use Bedrock::Context;
use Bedrock::Handler;
use Module::Load qw(load);
use List::Util qw(any);
use URI::Escape;
use Bedrock::Apache::API::Args;
use Bedrock::XML;
use Bedrock::Apache::Bedrock;

use bedrock_handler_common;

use Readonly;

Readonly::Scalar our $TRUE  => 1;
Readonly::Scalar our $FALSE => 0;

my @ACCESSORS = qw(
  api
  api_config
  autoconnect
  base_url
  bedrock_handler
  config
  context
  cookieless_sessions
  data
  dbi
  params
  protected_methods
  request
  routes
  session
  use_sessions
);

__PACKAGE__->follow_best_practice();
__PACKAGE__->mk_accessors(@ACCESSORS);

use parent qw(Class::Accessor::Fast);

our $VERSION = '@PACKAGE_VERSION@';

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  my @extra_accessors;

  foreach my $k ( keys %{$options} ) {
    next if any { $_ eq $k } @ACCESSORS;
    push @extra_accessors, $k;
  }

  if (@extra_accessors) {
    $class->mk_accessors(@extra_accessors);
  }

  my %app_config;
  @app_config{@extra_accessors} = @{$options}{@extra_accessors};

  my $self = $class->SUPER::new($options);

  my $r = $self->get_request;

  $self->set_api_config( \%app_config );

  my $retval = eval { $self->init_api; };

  return $self->show_error($EVAL_ERROR)
    if !$retval || $EVAL_ERROR;

  $self->init_routes;

  die "No routes defined in configuration!\n"
    if !$self->get_routes;

  return $self;
}

########################################################################
sub init_routes {
########################################################################
  my ($self) = @_;

  my $r = $self->get_request;

  my $api_config = $self->get_api_config;

  if ( exists $api_config->{routes} ) {
    $self->set_routes( $api_config->{routes} );
  }

  if ( exists $api_config->{protected} ) {
    $self->set_protected_methods( $api_config->{protected} );
  }

  return $self;
}

########################################################################
sub show_error {
########################################################################
  my ( $self, $error ) = @_;

  $error //= 'UNKNOWN ERROR';

  my $r = $self->get_request;

  $r->log->error($error);

  $r->content_type('text/html');

  $r->status(Apache2::Const::HTTP_INTERNAL_SERVER_ERROR);

  my $html = <<"END_OF_HTML";
<html>
  <head>
    <title>SERVER ERROR</title>
  </head>
  <body>
    <h1>Internal Server Error</h1>
    <pre>
    $error
    </pre>
  </body>
</html>
END_OF_HTML

  $r->print($html);

  return;
}

########################################################################
sub init_api {
########################################################################
  my ($self) = @_;

  my $r = $self->get_request;

  $r->log->debug( Dumper( [ headers => $r->headers_in ] ) );

  ######################################################################
  # 1. initialize Bedrock, read Bedrock configuration files
  ######################################################################
  $self->set_bedrock_handler( init_bedrock_handler($r) );

  $self->set_config( $self->get_bedrock_handler->get_config );

  my $context = Bedrock::Context->new( CONFIG => $self->get_config, APACHE_HANDLER => $r );

  $self->set_context($context);

  ######################################################################
  # 2. Fetch post data
  ######################################################################
  $self->set_data( $self->get_json_request );

  ######################################################################
  # 3. Initialise session manager
  ######################################################################
  my $use_sessions = $self->get_use_sessions // $TRUE;

  if ($use_sessions) {
    $self->init_session( $self->get_cookieless_sessions );

    $context->{SESSION} = $self->get_session;
  }

  ######################################################################
  # 4. Connect to database
  ######################################################################
  if ( $self->get_autoconnect ) {
    $self->connect_db;
  }

  ######################################################################
  # 5. Parse URI and get endpoint
  ######################################################################
  $self->parse_uri;

  ######################################################################
  # 6. Parse query args
  ######################################################################
  my $args = Bedrock::Apache::API::Args->new( $r->args );

  $self->set_params($args);

  return $self;
}

########################################################################
sub dispatch_request {
########################################################################
  my ($self) = @_;

  my $api = $self->get_api;

  my $r = $self->get_request;

  if ( !defined $api ) {
    $r->log->error( 'no api in uri?' . $self->get_request->uri );
    return Apache2::Const::HTTP_BAD_REQUEST;
  }

  my $routes = $self->get_routes;

  if ( !exists $routes->{$api} ) {
    $self->log->warn( sprintf 'no such endpoint (%s) - using default handler', $api );

    $r->handler('default-handler');
    $r->set_handlers( PerlResponseHandler => [] );

    return Apache2::Const::DECLINED;
  }

  # authenticate request if in protected array
  if ( $self->get_protected_methods && any { $api eq $_ } @{ $self->get_protected_methods } ) {
    return Apache2::Const::HTTP_UNAUTHORIZED
      if !$self->authenticate_request;
  }

  my $method = $self->get_request->method;

  if ( !grep { $_ eq $method } @{ $routes->{$api} } ) {
    $self->log->error("HTTP method $method not allowed for $api");
    return Apache2::Const::HTTP_BAD_REQUEST;
  }

  $api = "api_$api";

  if ( !$self->can($api) ) {
    $self->log->error->("$api not implemented!");
    return Apache2::Const::SERVER_ERROR;
  }

  return $self->$api();
}

########################################################################
sub parse_uri {
########################################################################
  my ($self) = @_;

  my $r = $self->get_request;

  my $api = $self->get_api;

  return $api
    if $api;

  my $api_base_url = $self->get_base_url // '/api';

  $r->log->info(
    Dumper(
      [ uri      => $r->uri,
        base_url => $self->get_base_url
      ]
    )
  );

  ($api) = $r->uri =~ m{^$api_base_url(?:/([^/]+))/?}xsm;

  $api //= 'default';
  $api =~ s/[-]/_/gxsm;

  $r->log->info( 'api: ' . $api );

  $self->set_api($api);

  return $api;
}

########################################################################
sub create_session_dir {
########################################################################
  my ($self) = @_;

  return
    if !$self->get_session;

  my $session_id        = $self->get_session->{session};
  my $session_base_path = $self->get_api_config->{SESSION_DIR};

  die "no SESSION_DIR in configuration\n"
    if !$session_base_path;

  my $session_dir = sprintf '%s/%s', $session_base_path, $session_id;

  if ( !-d $session_dir ) {
    make_path($session_dir);
  }

  return $session_dir;
}

########################################################################
sub get_cookie {
########################################################################
  my ( $self, $cookie_name ) = @_;

  my $r = $self->get_request;

  my $cookie_header = $r->headers_in->{Cookie} || q{};

  $r->log->debug( Dumper( [ cookie_header => $cookie_header ] ) );
  $r->log->debug( Dumper( [ headers       => $r->headers_in ] ) );

  return
    if !$cookie_header;

  my %cookies = map { split /=/xsm, $_, 2; } split /;\s*/sxm, $cookie_header;

  $r->log->debug( Dumper( [ cookies => \%cookies ] ) );

  return $cookies{$cookie_name};
}

########################################################################
sub init_session {
########################################################################
  my ( $self, $cookieless ) = @_;

  my $r = $self->get_request;

  my $session_config = $self->get_config->get_module_config('UserSession');

  my $api_config = $self->get_api_config;

  my ( $dbi_dsn, $dbi_db, $dbi_host, $dbi_user ) = @{$api_config}{qw( DBI_DSN DBI_DB DBI_HOST DBI_USER)};

  die "missing database configuration values\n"
    if !( $dbi_dsn && $dbi_db && $dbi_host && $dbi_user );

  $session_config->{data_source} = sprintf '%s:%s:%s', $dbi_dsn, $dbi_db, $dbi_host;

  $session_config->{username} = $dbi_user;
  $session_config->{password} = $api_config->{DBI_PASS};

  $session_config->{cookieless_sessions} //= q{};

  my $session = $self->bind_module( UserSession => $session_config );

  $r->log->debug(
    Dumper(
      [ session        => $session,
        session_config => $session_config
      ]
    )
  );

  $self->set_session($session);

  my $session_id = $r->headers_in->{'X-SESSION-ID'};

  ## -------------------------------------------------------------------
  ## TBD: Needs testing!
  ## -------------------------------------------------------------------
  ##
  ## At one point I did not know if AJAX calls
  ## would automatically send cookies if we returned them for login
  ## sessions. Apparently, once we get a cookie from our login
  ## endpoint it gets sent automatically on subsequent AJAX calls. IOW
  ## there is no need to send the session id in a header, it gets sent
  ## from the cookie. Where this might be used is in a client that
  ## does not store and resend cookies.
  ##
  ## The call below will inject the session identifier but not kill
  ## the cookie.
  ## -------------------------------------------------------------------
  if ($session_id) {
    $session->cookieless_sessions( $session_id, 'do-not-kill-cookie' );
  }
  ## -------------------------------------------------------------------

  return $session;
}

########################################################################
sub bind_module {
########################################################################
  my ( $self, $module, $config ) = @_;

  my $ctx = $self->get_context;

  $config //= $self->get_config->get_module_config($module);

  die "no configuration found for $module\n"
    if !$config;

  $self->get_request->log->debug( Dumper( [ config => $config ] ) );

  my $class = 'BLM::Startup::' . $module;

  load $class;

  my $blm = bless {}, $class;

  tie %{$blm}, $class, $ctx, $config // {};

  return $blm;
}

########################################################################
sub connect_db {
########################################################################
  my ($self) = @_;

  my $dbi = $self->get_dbi;

  return $dbi
    if $dbi;

  my $config = $self->get_api_config;

  my ( $database, $host, $user, $pass, $dsn ) = @{$config}{qw(DBI_DB DBI_HOST DBI_USER DBI_PASS DBI_DSN)};

  die "missing database configuration values\n"
    if !( $database && $host && $user && $dsn );

  my $connect_str = sprintf '%s:%s:%s', $dsn, $database, $host;

  $dbi = DBI->connect(
    $connect_str,
    $user, $pass,
    { AutoCommit => $FALSE,
      RaiseError => $TRUE,
      PrintError => $TRUE,
    }
  );

  $self->set_dbi($dbi);

  return $dbi;
}

########################################################################
sub get_session_dir {
########################################################################
  my ($self) = @_;

  my $session_id = $self->get_session->{session};

  my $session_dir = sprintf '%s/%s', $self->get_config->{SESSION_DIR}, $session_id;

  if ( !-d $session_dir ) {
    make_path($session_dir);
  }

  return $session_dir;
}

########################################################################
sub get_json_request {
########################################################################
  my ($self) = @_;

  my $r = $self->get_request;

  my $content_length = $r->headers_in->{'Content-Length'};

  return {}
    if !$content_length;

  my $payload;

  $r->read( $payload, $content_length );

  my $request = eval { return JSON->new->decode($payload); };

  if ( !$request || $EVAL_ERROR ) {
    $r->log_error( 'unable to read JSON payload ' . $EVAL_ERROR );
  }

  return $request;
}

########################################################################
sub send_json_response {
########################################################################
  my ( $self, $response, $status ) = @_;

  my $r = $self->get_request;

  $r->content_type('application/json');

  my $response_payload = eval { return JSON->new->pretty->encode($response); };

  if ( !$response_payload || $EVAL_ERROR ) {
    $r->log->error( 'unable to serialize payload ' . $EVAL_ERROR );

    $response_payload = JSON->new->pretty->encode( { error => $EVAL_ERROR } );

    $status = Apache2::Const::SERVER_ERROR;
  }

  $r->print($response_payload);

  return $status ? $status : Apache2::Const::OK;
}

########################################################################
sub log {
########################################################################
  my ($self) = @_;

  return $self->get_request->log;
}

########################################################################
sub get_ip {
########################################################################
  my ($self) = @_;

  my ($ip) = split /\s*,\s*/xsm, ( $self->get_request->headers_in->{'X-FORWARDED-FOR'} // q{} );

  return $ip;
}

########################################################################
sub authenticate_request {
########################################################################
  my ($self) = @_;

  my $r          = $self->get_request;
  my $api_config = $self->get_api_config->{API_NO_AUTHENTICATION};

  my $authentication_disabled //= $ENV{API_NO_AUTHENTICATION};

  return $TRUE
    if $authentication_disabled;

  # Check the X-API-KEY header
  my $header_api_key = $r->headers_in->{'X-API-KEY'};

  my $api_key = $api_config->{API_KEY};
  $api_key //= $ENV{API_KEY};

  die "no API_KEY defined in environment or configuration file!\n"
    if !$api_key;

  return $TRUE
    if $header_api_key && $api_key eq $header_api_key;

  $r->log_error('Invalid or missing X-API-KEY');

  $r->log->error( Dumper( [ header => $r->headers_in ] ) );

  return $FALSE;
}

########################################################################
sub DESTROY {
########################################################################
  my ($self) = @_;

  if ( $self->get_dbi && $self->get_dbi->ping ) {
    $self->get_dbi->disconnect;
  }

  if ( $self->get_session ) {
    $self->get_session->closeBLM;
  }

  return;
}

1;

__END__

=pod

=head1 NAME

Bedrock::Apache::API - Base class for implementing modular, method-validated APIs in mod_perl

=head1 SYNOPSIS

In your API class:

  package MyApp::API;

  use parent qw(Bedrock::Apache::API);

  our $VERSION = '1.2.3';

  sub api_version {
    my ($self) = @_;

    my $r = $self->get_request;

    my $dispatch = {
      GET => sub {
        $r->content_type('text/plain');
        $r->print($VERSION);
      },
    };

    return $dispatch->{$method}->();
  }

In your configuration file:

  <object name="routes">
    <array name="version">
      <scalar>GET</scalar>
    </array>
  </object>

See L<Bedrock::Apache::API::Routes> for an example API.

=head1 DESCRIPTION

C<Bedrock::Apache::API> provides a base class building REST-style APIs
under mod_perl. You this module subclass, define endpoints (e.g.,
C<version>, C<status>) and register supported HTTP methods per
endpoint. Then implement your endpoints.

The base class takes care of:

- Parsing parameters and cookies
- Session integration
- Response rendering (typically JSON)
- Validating that only declared methods are used
- Storing configuration
- Authenticating requests against an API key

=head1 USAGE OVERVIEW

=over 4

=item * Subclass C<Bedrock::Apache::API>

=item * Add routes to a configuration file

=item * For each endpoint, implement C<api_{name}()> and route by method

=back

=head1 CONSTRUCTOR

=head2 new( \%options )

Instantiates the API object.

Supported keys:

=over 4

=item * C<request> - Apache2::RequestRec object

=item * C<config> - Optional config hashref

=item * C<params> - Optional parsed params

=item * C<base_url> - Optional base path

=item * C<autoconnect> - Connect to DB automatically

=item * C<use_sessions> - Enable session support

=item * C<cookieless_sessions> - Allow URL token fallback

=back

=head1 METHODS AND SUBROUTINES

The C<init_api> and C<init_routes> methods should be mostly opaque to
you the REST API writer. They are documented here for completeness.

=head2 init_api

Called automatically by C<new()> to bootstrap configuration, context, params,
DBI connection, and session.

=head2 init_routes( \%endpoint_to_methods )

Intializes the list of valid endpoints and HTTP methods. See L</ROUTE
CONFIGURATION> for more details.

=head2 get_param(param-name)

Returns the decoded query or POST parameter.

=head2 get_cookie(cookie-name)

Returns a cookie value.

=head2 render_response($data)

Outputs a data structure (hashref or arrayref) as a JSON response with the
appropriate content-type header.

=head2 show_error($message)

Writes the error to Apache's log and sends a 500 error with error
message.

=head2 get_request

Returns the Apache2::RequestRec object.

=head2 set_api_config( \%config )

Stores a config hash in the object for use by handlers.

=head2 get_config

Retrieves the config set via C<set_api_config>.

=head2 get_context

Returns the Bedrock::Context object associated with the request.

=head1 ROUTE CONFIGURATION

 Typically routes are defined in your API's configuration file like this:

  <object name="routes">
    <array name="version">
      <scalar>GET</scalar>
    </array>
    <array name="customer">
      <scalar>GET</scalar>
      <scalar>POST</scalar>
    </array>
  </object>
  <array name="protected">
    <scalar>customer</scalar>
  </array>

Each route should define an array of HTTP methods that endpoint will
support. You then implement a method with the naming convention
C<api_{route}>. 

I<If your route is more complex, for example C</contacts/officers> the
endpoint you would define is still C<customer>. That is, you must
handle more complex routes inside your endpoint's method.>

=head2 Authenticating Requests

You can create an optional C<protected> array that defines routes that
cause the C<authenticate_request()> method to be called.  The default
behavior will check the C<X-API-KEY> header against the value of
C<API_KEY> that you define in your configuration file.  If the values
do not match, an 401 (UNAUTHORIZED) will will be returned.

Override the C<authenticate_request()> method if you want more robust
authentication or authorization. The method should return a true value
if the request should be allowed.

This method is called during the construction of the object. If you
want to override this method you must set the routes with the
C<set_routes()> method.

Example:

  $self->set_routes({
    ping    => [qw(GET)],
    login   => [qw(POST)],
    profile => [qw(GET POST PUT)],
  });

=head1 API METHOD CONVENTION

For each key in your C<routes> configuration array, you must implement
a method called:

  api_{key}

Inside this method, you should dispatch to another method or
subroutine based on the HTTP method:

  sub api_profile {
    my ($self) = @_;

    my $method = $self->get_request->method;

    return {
      GET => sub { ... },
      POST => sub { ... },
    }->{$method}->($self);
  }

The parent class will automatically return 400 if the requested method
was not listed in your route table.

=head1 SEE ALSO

L<Apache2::Const>, L<Bedrock::Apache::ExampleAPI>, L<Bedrock::Apache::Handler>, L<Apache2::RequestRec>

=head1 AUTHORS

Rob Lauer - <rlauer6@comcast.net>

=head1 LICENSE

This module is released under the same terms as Perl itself.

=cut
